# SEP 02 2015
# Process Mongo Log

input { 
	file {
                path => "/data/*-mongo_rs*/mongodb.log"
                start_position => beginning
                tags => ['mongod','prod']
                type => 'mongod'
		sincedb_path => "/usr/share/logstash/sincedb"
        }
}

filter {
        if [type] == 'mongod' {

	###### PARSE WHOLE LOG
                grok {
                        match => { "message" => [ "%{MONGO_LOG}" ] }
                }
	###### DROP Connection messages
                if ([mongoStatement] =~ /^accepted from/) { drop {} }
                if ([mongoStatement] =~ /^connection /) { drop {} }

	###### DROP IF Component is LockPinger,clientcursormon
		if [component] == "LockPinger" { drop{} }
		if [component] == "clientcursormon" { drop{} }

	###### PARSE ONLY QUERY

		if [ctype] == "query" {
			grok {
				match => [ "mongoStatement", "%{MONGO_QY}" ]
				add_tag => "query"
			}
		}

	###### PARSE ONLY remove QUERY

		if [ctype] == "remove" {
			grok {
				match => [ "mongoStatement", "%{MONGO_QY}" ]
				add_tag => "query_remove"
			}
		}

	###### PARSE ONLY COMMAND
                if [ctype] == "command" {
                        grok {
				match => [ "mongoStatement", "%{MONGO_AG}" ]
				add_tag => "command"
                        }
                }

	###### PARSE ONLY GETMORE
                if [ctype] == "getmore" {
                        grok {
                                match => [ "mongoStatement", "%{MONGO_GM}" ]
				add_tag => "getmore"
                        }
                }

	###### PARSE PARAMS
		grok { match => [ "message","%{CURSORID}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{NTORETURN}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{NTOSKIP}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{NSCANNED}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{SCAN_AND_ORDER}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{IDHACK}" ] remove_tag => [ "_grokparsefailure" ] } 
		grok { match => [ "message","%{NMOVED}" ] remove_tag => [ "_grokparsefailure" ] } 
		grok { match => [ "message","%{NUPDATED}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{KEYUPDATES}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{NUMYIELDS}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{RLOCKS}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{WLOCKS}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{NRETURNED}" ] remove_tag => [ "_grokparsefailure" ] }
		grok { match => [ "message","%{RESLEN}" ] remove_tag => [ "_grokparsefailure" ] }			
		grok { match => [ "message","%{NDELETED}" ] remove_tag => [ "_grokparsefailure" ] }			

	###### ADD TIMESTAMP AS LOG TIME
                date { match => [ "timestamp" , "ISO8601" ] }

	###### DROP LOGS with command = 'writebacklisten'
                if [command] == "writebacklisten" { drop {} }
	}

}

output {	
	if [type] == 'mongod'  {
		elasticsearch {
			host => [ "host1", "host2" ] 
			protocol => "http"
			index => "prod-mongo-%{+YYYY-MM-dd}"
			document_type => "prod-mongo"
		}
	}
}
